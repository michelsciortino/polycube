/**
* dyntmon API generated from dyntmon.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* DataplaneBase.h
*
*
*/

#pragma once

#include "../serializer/DataplaneJsonObject.h"
#include "../serializer/DataplaneReloadOutputJsonObject.h"


#include "../DataplaneMetrics.h"





#include <spdlog/spdlog.h>

using namespace polycube::service::model;

class Dyntmon;

class DataplaneBase {
 public:
  
  DataplaneBase(Dyntmon &parent);
  
  virtual ~DataplaneBase();
  virtual void update(const DataplaneJsonObject &conf);
  virtual DataplaneJsonObject toJsonObject();

  /// <summary>
  /// eBPF program name
  /// </summary>
  virtual std::string getName() = 0;
  virtual void setName(const std::string &value) = 0;

  /// <summary>
  /// eBPF source code
  /// </summary>
  virtual std::string getCode() = 0;
  virtual void setCode(const std::string &value) = 0;

  /// <summary>
  /// Exported Metric
  /// </summary>
  virtual std::shared_ptr<DataplaneMetrics> getMetrics(const std::string &name) = 0;
  virtual std::vector<std::shared_ptr<DataplaneMetrics>> getMetricsList() = 0;
  virtual void addMetrics(const std::string &name, const DataplaneMetricsJsonObject &conf) = 0;
  virtual void addMetricsList(const std::vector<DataplaneMetricsJsonObject> &conf);
  virtual void replaceMetrics(const std::string &name, const DataplaneMetricsJsonObject &conf);
  virtual void delMetrics(const std::string &name) = 0;
  virtual void delMetricsList();
  virtual DataplaneReloadOutputJsonObject reload() = 0;

  std::shared_ptr<spdlog::logger> logger();
 protected:
  Dyntmon &parent_;
};
