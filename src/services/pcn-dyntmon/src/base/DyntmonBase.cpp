/**
* dyntmon API generated from dyntmon.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "DyntmonBase.h"

DyntmonBase::DyntmonBase(const std::string name) {
  logger()->set_pattern("[%Y-%m-%d %H:%M:%S.%e] [Dyntmon] [%n] [%l] %v");
}



DyntmonBase::~DyntmonBase() {}

void DyntmonBase::update(const DyntmonJsonObject &conf) {
  set_conf(conf.getBase());

  if (conf.dataplaneIsSet()) {
    auto m = getDataplane();
    m->update(conf.getDataplane());
  }
  if (conf.metricsIsSet()) {
    for (auto &i : conf.getMetrics()) {
      auto name = i.getName();
      auto m = getMetrics(name);
      m->update(i);
    }
  }
}

DyntmonJsonObject DyntmonBase::toJsonObject() {
  DyntmonJsonObject conf;
  conf.setBase(to_json());
  conf.setName(getName());
  conf.setDataplane(getDataplane()->toJsonObject());
  for(auto &i : getMetricsList()) {
    conf.addMetrics(i->toJsonObject());
  }
  //conf.setOpenMetrics(getOpenMetrics());
  return conf;
}

void DyntmonBase::replaceDataplane(const DataplaneJsonObject &conf) {
  // TODO: This is a basic default implementation, maybe you want to improve it
  delDataplane();
  addDataplane(conf);
}
void DyntmonBase::addMetricsList(const std::vector<MetricsJsonObject> &conf) {
  for (auto &i : conf) {
    std::string name_ = i.getName();
    addMetrics(name_, i);
  }
}

void DyntmonBase::replaceMetrics(const std::string &name, const MetricsJsonObject &conf) {
  delMetrics(name);
  std::string name_ = conf.getName();
  addMetrics(name_, conf);
}

void DyntmonBase::delMetricsList() {
  auto elements = getMetricsList();
  for (auto &i : elements) {
    std::string name_ = i->getName();
    delMetrics(name_);
  }
}


