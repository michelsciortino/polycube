/**
* dyntmon API generated from dyntmon.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "DataplaneBase.h"
#include "../Dyntmon.h"


DataplaneBase::DataplaneBase(Dyntmon &parent)
    : parent_(parent) {}

DataplaneBase::~DataplaneBase() {}

void DataplaneBase::update(const DataplaneJsonObject &conf) {

  if (conf.nameIsSet()) {
    setName(conf.getName());
  }
  if (conf.codeIsSet()) {
    setCode(conf.getCode());
  }
  if (conf.metricsIsSet()) {
    for (auto &i : conf.getMetrics()) {
      auto name = i.getName();
      auto m = getMetrics(name);
      m->update(i);
    }
  }
}

DataplaneJsonObject DataplaneBase::toJsonObject() {
  DataplaneJsonObject conf;

  conf.setName(getName());
  conf.setCode(getCode());
  for(auto &i : getMetricsList()) {
    conf.addDataplaneMetrics(i->toJsonObject());
  }

  return conf;
}
void DataplaneBase::addMetricsList(const std::vector<DataplaneMetricsJsonObject> &conf) {
  for (auto &i : conf) {
    std::string name_ = i.getName();
    addMetrics(name_, i);
  }
}

void DataplaneBase::replaceMetrics(const std::string &name, const DataplaneMetricsJsonObject &conf) {
  delMetrics(name);
  std::string name_ = conf.getName();
  addMetrics(name_, conf);
}

void DataplaneBase::delMetricsList() {
  auto elements = getMetricsList();
  for (auto &i : elements) {
    std::string name_ = i->getName();
    delMetrics(name_);
  }
}

std::shared_ptr<spdlog::logger> DataplaneBase::logger() {
  return parent_.logger();
}

