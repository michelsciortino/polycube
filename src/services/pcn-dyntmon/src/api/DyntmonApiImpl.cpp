/**
 * dyntmon API generated from dyntmon.yang
 *
 * NOTE: This file is auto generated by polycube-codegen
 * https://github.com/polycube-network/polycube-codegen
 */

/* Do not edit this file manually */

#include "DyntmonApiImpl.h"

namespace polycube {
namespace service {
namespace api {

using namespace polycube::service::model;

namespace DyntmonApiImpl {
namespace {
std::unordered_map<std::string, std::shared_ptr<Dyntmon>> cubes;
std::mutex cubes_mutex;

std::shared_ptr<Dyntmon> get_cube(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  auto iter = cubes.find(name);
  if (iter == cubes.end())
    throw std::runtime_error("Cube " + name + " does not exist");
  return iter->second;
}
}  // namespace

void create_dyntmon_by_id(const std::string &name,
                          const DyntmonJsonObject &jsonObject) {
  {
    // check if name is valid before creating it
    std::lock_guard<std::mutex> guard(cubes_mutex);
    if (cubes.count(name) != 0)
      throw std::runtime_error("There is already a cube with name " + name);
  }
  auto ptr = std::make_shared<Dyntmon>(name, jsonObject);
  std::unordered_map<std::string, std::shared_ptr<Dyntmon>>::iterator iter;
  bool inserted;
  std::lock_guard<std::mutex> guard(cubes_mutex);
  std::tie(iter, inserted) = cubes.emplace(name, std::move(ptr));
  if (!inserted)
    throw std::runtime_error("There is already a cube with name " + name);
}

void replace_dyntmon_by_id(const std::string &name,
                           const DyntmonJsonObject &bridge) {
  throw std::runtime_error("Method not supported!");
}

void delete_dyntmon_by_id(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  if (cubes.count(name) == 0)
    throw std::runtime_error("Cube " + name + " does not exist");
  cubes.erase(name);
}

std::vector<DyntmonJsonObject> read_dyntmon_list_by_id() {
  std::vector<DyntmonJsonObject> jsonObject_vect;
  for (auto &i : cubes) {
    auto m = get_cube(i.first);
    jsonObject_vect.push_back(m->toJsonObject());
  }
  return jsonObject_vect;
}

std::vector<nlohmann::fifo_map<std::string, std::string>>
read_dyntmon_list_by_id_get_list() {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  for (auto &x : cubes) {
    nlohmann::fifo_map<std::string, std::string> m;
    m["name"] = x.first;
    r.push_back(std::move(m));
  }
  return r;
}

/**
 * @brief   Create dataplane by ID
 *
 * Create operation of resource: dataplane*
 *
 * @param[in] name ID of name
 * @param[in] value dataplanebody object
 *
 * Responses:
 *
 */
void create_dyntmon_dataplane_by_id(const std::string &name,
                                    const DataplaneJsonObject &value) {
  auto dyntmon = get_cube(name);
  return dyntmon->addDataplane(value);
}

/**
 * @brief   Create metrics by ID
 *
 * Create operation of resource: metrics*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] value metricsbody object
 *
 * Responses:
 *
 */
void create_dyntmon_dataplane_metrics_by_id(
    const std::string &name, const std::string &metricsName,
    const DataplaneMetricsJsonObject &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  return dataplane->addMetrics(metricsName, value);
}

/**
 * @brief   Create metrics by ID
 *
 * Create operation of resource: metrics*
 *
 * @param[in] name ID of name
 * @param[in] value metricsbody object
 *
 * Responses:
 *
 */
void create_dyntmon_dataplane_metrics_list_by_id(
    const std::string &name,
    const std::vector<DataplaneMetricsJsonObject> &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  dataplane->addMetricsList(value);
}

/**
 * @brief   Create open-metrics-metadata by ID
 *
 * Create operation of resource: open-metrics-metadata*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] value open-metrics-metadatabody object
 *
 * Responses:
 *
 */
void create_dyntmon_dataplane_metrics_open_metrics_metadata_by_id(
    const std::string &name, const std::string &metricsName,
    const DataplaneMetricsOpenMetricsMetadataJsonObject &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  return metrics->addOpenMetricsMetadata(value);
}

/**
 * @brief   Create label by ID
 *
 * Create operation of resource: label*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] labelName ID of label_name
 * @param[in] value labelbody object
 *
 * Responses:
 *
 */
void create_dyntmon_dataplane_metrics_open_metrics_metadata_label_by_id(
    const std::string &name, const std::string &metricsName,
    const std::string &labelName,
    const DataplaneMetricsOpenMetricsMetadataLabelJsonObject &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  auto openMetricsMetadata = metrics->getOpenMetricsMetadata();
  return openMetricsMetadata->addLabel(labelName, value);
}

/**
 * @brief   Create label by ID
 *
 * Create operation of resource: label*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] value labelbody object
 *
 * Responses:
 *
 */
void create_dyntmon_dataplane_metrics_open_metrics_metadata_label_list_by_id(
    const std::string &name, const std::string &metricsName,
    const std::vector<DataplaneMetricsOpenMetricsMetadataLabelJsonObject>
        &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  auto openMetricsMetadata = metrics->getOpenMetricsMetadata();
  openMetricsMetadata->addLabelList(value);
}

/**
 * @brief   Create reload by ID
 *
 * Create operation of resource: reload*
 *
 * @param[in] name ID of name
 *
 * Responses:
 * DataplaneReloadOutputJsonObject
 */
DataplaneReloadOutputJsonObject create_dyntmon_dataplane_reload_by_id(
    const std::string &name) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  return dataplane->reload();
}

/**
 * @brief   Delete dataplane by ID
 *
 * Delete operation of resource: dataplane*
 *
 * @param[in] name ID of name
 *
 * Responses:
 *
 */
void delete_dyntmon_dataplane_by_id(const std::string &name) {
  auto dyntmon = get_cube(name);
  return dyntmon->delDataplane();
}

/**
 * @brief   Delete metrics by ID
 *
 * Delete operation of resource: metrics*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 *
 * Responses:
 *
 */
void delete_dyntmon_dataplane_metrics_by_id(const std::string &name,
                                            const std::string &metricsName) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  return dataplane->delMetrics(metricsName);
}

/**
 * @brief   Delete metrics by ID
 *
 * Delete operation of resource: metrics*
 *
 * @param[in] name ID of name
 *
 * Responses:
 *
 */
void delete_dyntmon_dataplane_metrics_list_by_id(const std::string &name) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  dataplane->delMetricsList();
}

/**
 * @brief   Delete open-metrics-metadata by ID
 *
 * Delete operation of resource: open-metrics-metadata*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 *
 * Responses:
 *
 */
void delete_dyntmon_dataplane_metrics_open_metrics_metadata_by_id(
    const std::string &name, const std::string &metricsName) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  return metrics->delOpenMetricsMetadata();
}

/**
 * @brief   Delete label by ID
 *
 * Delete operation of resource: label*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] labelName ID of label_name
 *
 * Responses:
 *
 */
void delete_dyntmon_dataplane_metrics_open_metrics_metadata_label_by_id(
    const std::string &name, const std::string &metricsName,
    const std::string &labelName) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  auto openMetricsMetadata = metrics->getOpenMetricsMetadata();
  return openMetricsMetadata->delLabel(labelName);
}

/**
 * @brief   Delete label by ID
 *
 * Delete operation of resource: label*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 *
 * Responses:
 *
 */
void delete_dyntmon_dataplane_metrics_open_metrics_metadata_label_list_by_id(
    const std::string &name, const std::string &metricsName) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  auto openMetricsMetadata = metrics->getOpenMetricsMetadata();
  openMetricsMetadata->delLabelList();
}

/**
 * @brief   Read dyntmon by ID
 *
 * Read operation of resource: dyntmon*
 *
 * @param[in] name ID of name
 *
 * Responses:
 * DyntmonJsonObject
 */
DyntmonJsonObject read_dyntmon_by_id(const std::string &name) {
  return get_cube(name)->toJsonObject();
}

/**
 * @brief   Read dataplane by ID
 *
 * Read operation of resource: dataplane*
 *
 * @param[in] name ID of name
 *
 * Responses:
 * DataplaneJsonObject
 */
DataplaneJsonObject read_dyntmon_dataplane_by_id(const std::string &name) {
  auto dyntmon = get_cube(name);
  return dyntmon->getDataplane()->toJsonObject();
}

/**
 * @brief   Read code by ID
 *
 * Read operation of resource: code*
 *
 * @param[in] name ID of name
 *
 * Responses:
 * std::string
 */
std::string read_dyntmon_dataplane_code_by_id(const std::string &name) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  return dataplane->getCode();
}

/**
 * @brief   Read metrics by ID
 *
 * Read operation of resource: metrics*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 *
 * Responses:
 * DataplaneMetricsJsonObject
 */
DataplaneMetricsJsonObject read_dyntmon_dataplane_metrics_by_id(
    const std::string &name, const std::string &metricsName) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  return dataplane->getMetrics(metricsName)->toJsonObject();
}

/**
 * @brief   Read metrics by ID
 *
 * Read operation of resource: metrics*
 *
 * @param[in] name ID of name
 *
 * Responses:
 * std::vector<DataplaneMetricsJsonObject>
 */
std::vector<DataplaneMetricsJsonObject>
read_dyntmon_dataplane_metrics_list_by_id(const std::string &name) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto &&metrics = dataplane->getMetricsList();
  std::vector<DataplaneMetricsJsonObject> m;
  for (auto &i : metrics)
    m.push_back(i->toJsonObject());
  return m;
}

/**
 * @brief   Read map-name by ID
 *
 * Read operation of resource: map-name*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 *
 * Responses:
 * std::string
 */
std::string read_dyntmon_dataplane_metrics_map_name_by_id(
    const std::string &name, const std::string &metricsName) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  return metrics->getMapName();
}

/**
 * @brief   Read open-metrics-metadata by ID
 *
 * Read operation of resource: open-metrics-metadata*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 *
 * Responses:
 * DataplaneMetricsOpenMetricsMetadataJsonObject
 */
DataplaneMetricsOpenMetricsMetadataJsonObject
read_dyntmon_dataplane_metrics_open_metrics_metadata_by_id(
    const std::string &name, const std::string &metricsName) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  return metrics->getOpenMetricsMetadata()->toJsonObject();
}

/**
 * @brief   Read help by ID
 *
 * Read operation of resource: help*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 *
 * Responses:
 * std::string
 */
std::string read_dyntmon_dataplane_metrics_open_metrics_metadata_help_by_id(
    const std::string &name, const std::string &metricsName) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  auto openMetricsMetadata = metrics->getOpenMetricsMetadata();
  return openMetricsMetadata->getHelp();
}

/**
 * @brief   Read label by ID
 *
 * Read operation of resource: label*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] labelName ID of label_name
 *
 * Responses:
 * DataplaneMetricsOpenMetricsMetadataLabelJsonObject
 */
DataplaneMetricsOpenMetricsMetadataLabelJsonObject
read_dyntmon_dataplane_metrics_open_metrics_metadata_label_by_id(
    const std::string &name, const std::string &metricsName,
    const std::string &labelName) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  auto openMetricsMetadata = metrics->getOpenMetricsMetadata();
  return openMetricsMetadata->getLabel(labelName)->toJsonObject();
}

/**
 * @brief   Read label by ID
 *
 * Read operation of resource: label*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 *
 * Responses:
 * std::vector<DataplaneMetricsOpenMetricsMetadataLabelJsonObject>
 */
std::vector<DataplaneMetricsOpenMetricsMetadataLabelJsonObject>
read_dyntmon_dataplane_metrics_open_metrics_metadata_label_list_by_id(
    const std::string &name, const std::string &metricsName) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  auto openMetricsMetadata = metrics->getOpenMetricsMetadata();
  auto &&label = openMetricsMetadata->getLabelList();
  std::vector<DataplaneMetricsOpenMetricsMetadataLabelJsonObject> m;
  for (auto &i : label)
    m.push_back(i->toJsonObject());
  return m;
}

/**
 * @brief   Read value by ID
 *
 * Read operation of resource: value*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] labelName ID of label_name
 *
 * Responses:
 * std::string
 */
std::string
read_dyntmon_dataplane_metrics_open_metrics_metadata_label_value_by_id(
    const std::string &name, const std::string &metricsName,
    const std::string &labelName) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  auto openMetricsMetadata = metrics->getOpenMetricsMetadata();
  auto label = openMetricsMetadata->getLabel(labelName);
  return label->getValue();
}

/**
 * @brief   Read type by ID
 *
 * Read operation of resource: type*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 *
 * Responses:
 * DataplaneMetricsOpenMetricsMetadataTypeEnum
 */
DataplaneMetricsOpenMetricsMetadataTypeEnum
read_dyntmon_dataplane_metrics_open_metrics_metadata_type_by_id(
    const std::string &name, const std::string &metricsName) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  auto openMetricsMetadata = metrics->getOpenMetricsMetadata();
  return openMetricsMetadata->getType();
}

/**
 * @brief   Read name by ID
 *
 * Read operation of resource: name*
 *
 * @param[in] name ID of name
 *
 * Responses:
 * std::string
 */
std::string read_dyntmon_dataplane_name_by_id(const std::string &name) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  return dataplane->getName();
}

/**
 * @brief   Read metrics by ID
 *
 * Read operation of resource: metrics*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 *
 * Responses:
 * MetricsJsonObject
 */
MetricsJsonObject read_dyntmon_metrics_by_id(const std::string &name,
                                             const std::string &metricsName) {
  auto dyntmon = get_cube(name);
  return dyntmon->getMetrics(metricsName)->toJsonObject();
}

/**
 * @brief   Read metrics by ID
 *
 * Read operation of resource: metrics*
 *
 * @param[in] name ID of name
 *
 * Responses:
 * std::vector<MetricsJsonObject>
 */
std::vector<MetricsJsonObject> read_dyntmon_metrics_list_by_id(
    const std::string &name) {
  auto dyntmon = get_cube(name);
  auto &&metrics = dyntmon->getMetricsList();
  std::vector<MetricsJsonObject> m;
  for (auto &i : metrics)
    m.push_back(i->toJsonObject());
  return m;
}

/**
 * @brief   Read timestamp by ID
 *
 * Read operation of resource: timestamp*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 *
 * Responses:
 * int64_t
 */
int64_t read_dyntmon_metrics_timestamp_by_id(const std::string &name,
                                             const std::string &metricsName) {
  auto dyntmon = get_cube(name);
  auto metrics = dyntmon->getMetrics(metricsName);
  return metrics->getTimestamp();
}

/**
 * @brief   Read value by ID
 *
 * Read operation of resource: value*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 *
 * Responses:
 * std::string
 */
std::string read_dyntmon_metrics_value_by_id(const std::string &name,
                                             const std::string &metricsName) {
  auto dyntmon = get_cube(name);
  auto metrics = dyntmon->getMetrics(metricsName);
  return metrics->getValue();
}

/**
 * @brief   Read open-metrics by ID
 *
 * Read operation of resource: open-metrics*
 *
 * @param[in] name ID of name
 *
 * Responses:
 * std::string
 */
std::string read_dyntmon_open_metrics_by_id(const std::string &name) {
  auto dyntmon = get_cube(name);
  return dyntmon->getOpenMetrics();
}

/**
 * @brief   Replace dataplane by ID
 *
 * Replace operation of resource: dataplane*
 *
 * @param[in] name ID of name
 * @param[in] value dataplanebody object
 *
 * Responses:
 *
 */
void replace_dyntmon_dataplane_by_id(const std::string &name,
                                     const DataplaneJsonObject &value) {
  auto dyntmon = get_cube(name);
  return dyntmon->replaceDataplane(value);
}

/**
 * @brief   Replace metrics by ID
 *
 * Replace operation of resource: metrics*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] value metricsbody object
 *
 * Responses:
 *
 */
void replace_dyntmon_dataplane_metrics_by_id(
    const std::string &name, const std::string &metricsName,
    const DataplaneMetricsJsonObject &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  return dataplane->replaceMetrics(metricsName, value);
}

/**
 * @brief   Replace metrics by ID
 *
 * Replace operation of resource: metrics*
 *
 * @param[in] name ID of name
 * @param[in] value metricsbody object
 *
 * Responses:
 *
 */
void replace_dyntmon_dataplane_metrics_list_by_id(
    const std::string &name,
    const std::vector<DataplaneMetricsJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
 * @brief   Replace open-metrics-metadata by ID
 *
 * Replace operation of resource: open-metrics-metadata*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] value open-metrics-metadatabody object
 *
 * Responses:
 *
 */
void replace_dyntmon_dataplane_metrics_open_metrics_metadata_by_id(
    const std::string &name, const std::string &metricsName,
    const DataplaneMetricsOpenMetricsMetadataJsonObject &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  return metrics->replaceOpenMetricsMetadata(value);
}

/**
 * @brief   Replace label by ID
 *
 * Replace operation of resource: label*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] labelName ID of label_name
 * @param[in] value labelbody object
 *
 * Responses:
 *
 */
void replace_dyntmon_dataplane_metrics_open_metrics_metadata_label_by_id(
    const std::string &name, const std::string &metricsName,
    const std::string &labelName,
    const DataplaneMetricsOpenMetricsMetadataLabelJsonObject &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  auto openMetricsMetadata = metrics->getOpenMetricsMetadata();
  return openMetricsMetadata->replaceLabel(labelName, value);
}

/**
 * @brief   Replace label by ID
 *
 * Replace operation of resource: label*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] value labelbody object
 *
 * Responses:
 *
 */
void replace_dyntmon_dataplane_metrics_open_metrics_metadata_label_list_by_id(
    const std::string &name, const std::string &metricsName,
    const std::vector<DataplaneMetricsOpenMetricsMetadataLabelJsonObject>
        &value) {
  throw std::runtime_error("Method not supported");
}

/**
 * @brief   Update dyntmon by ID
 *
 * Update operation of resource: dyntmon*
 *
 * @param[in] name ID of name
 * @param[in] value dyntmonbody object
 *
 * Responses:
 *
 */
void update_dyntmon_by_id(const std::string &name,
                          const DyntmonJsonObject &value) {
  auto dyntmon = get_cube(name);
  return dyntmon->update(value);
}

/**
 * @brief   Update dataplane by ID
 *
 * Update operation of resource: dataplane*
 *
 * @param[in] name ID of name
 * @param[in] value dataplanebody object
 *
 * Responses:
 *
 */
void update_dyntmon_dataplane_by_id(const std::string &name,
                                    const DataplaneJsonObject &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  return dataplane->update(value);
}

/**
 * @brief   Update code by ID
 *
 * Update operation of resource: code*
 *
 * @param[in] name ID of name
 * @param[in] value eBPF source code
 *
 * Responses:
 *
 */
void update_dyntmon_dataplane_code_by_id(const std::string &name,
                                         const std::string &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  return dataplane->setCode(value);
}

/**
 * @brief   Update metrics by ID
 *
 * Update operation of resource: metrics*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] value metricsbody object
 *
 * Responses:
 *
 */
void update_dyntmon_dataplane_metrics_by_id(
    const std::string &name, const std::string &metricsName,
    const DataplaneMetricsJsonObject &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  return metrics->update(value);
}

/**
 * @brief   Update metrics by ID
 *
 * Update operation of resource: metrics*
 *
 * @param[in] name ID of name
 * @param[in] value metricsbody object
 *
 * Responses:
 *
 */
void update_dyntmon_dataplane_metrics_list_by_id(
    const std::string &name,
    const std::vector<DataplaneMetricsJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
 * @brief   Update map-name by ID
 *
 * Update operation of resource: map-name*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] value Corrisponding eBPF map name
 *
 * Responses:
 *
 */
void update_dyntmon_dataplane_metrics_map_name_by_id(
    const std::string &name, const std::string &metricsName,
    const std::string &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  return metrics->setMapName(value);
}

/**
 * @brief   Update open-metrics-metadata by ID
 *
 * Update operation of resource: open-metrics-metadata*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] value open-metrics-metadatabody object
 *
 * Responses:
 *
 */
void update_dyntmon_dataplane_metrics_open_metrics_metadata_by_id(
    const std::string &name, const std::string &metricsName,
    const DataplaneMetricsOpenMetricsMetadataJsonObject &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  auto openMetricsMetadata = metrics->getOpenMetricsMetadata();
  return openMetricsMetadata->update(value);
}

/**
 * @brief   Update help by ID
 *
 * Update operation of resource: help*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] value Metric description
 *
 * Responses:
 *
 */
void update_dyntmon_dataplane_metrics_open_metrics_metadata_help_by_id(
    const std::string &name, const std::string &metricsName,
    const std::string &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  auto openMetricsMetadata = metrics->getOpenMetricsMetadata();
  return openMetricsMetadata->setHelp(value);
}

/**
 * @brief   Update label by ID
 *
 * Update operation of resource: label*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] labelName ID of label_name
 * @param[in] value labelbody object
 *
 * Responses:
 *
 */
void update_dyntmon_dataplane_metrics_open_metrics_metadata_label_by_id(
    const std::string &name, const std::string &metricsName,
    const std::string &labelName,
    const DataplaneMetricsOpenMetricsMetadataLabelJsonObject &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  auto openMetricsMetadata = metrics->getOpenMetricsMetadata();
  auto label = openMetricsMetadata->getLabel(labelName);
  return label->update(value);
}

/**
 * @brief   Update label by ID
 *
 * Update operation of resource: label*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] value labelbody object
 *
 * Responses:
 *
 */
void update_dyntmon_dataplane_metrics_open_metrics_metadata_label_list_by_id(
    const std::string &name, const std::string &metricsName,
    const std::vector<DataplaneMetricsOpenMetricsMetadataLabelJsonObject>
        &value) {
  throw std::runtime_error("Method not supported");
}

/**
 * @brief   Update value by ID
 *
 * Update operation of resource: value*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] labelName ID of label_name
 * @param[in] value Label value (e.g., &#39;POST&#39;)
 *
 * Responses:
 *
 */
void update_dyntmon_dataplane_metrics_open_metrics_metadata_label_value_by_id(
    const std::string &name, const std::string &metricsName,
    const std::string &labelName, const std::string &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  auto openMetricsMetadata = metrics->getOpenMetricsMetadata();
  auto label = openMetricsMetadata->getLabel(labelName);
  return label->setValue(value);
}

/**
 * @brief   Update type by ID
 *
 * Update operation of resource: type*
 *
 * @param[in] name ID of name
 * @param[in] metricsName ID of metrics_name
 * @param[in] value Metric type
 *
 * Responses:
 *
 */
void update_dyntmon_dataplane_metrics_open_metrics_metadata_type_by_id(
    const std::string &name, const std::string &metricsName,
    const DataplaneMetricsOpenMetricsMetadataTypeEnum &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  auto metrics = dataplane->getMetrics(metricsName);
  auto openMetricsMetadata = metrics->getOpenMetricsMetadata();
  return openMetricsMetadata->setType(value);
}

/**
 * @brief   Update name by ID
 *
 * Update operation of resource: name*
 *
 * @param[in] name ID of name
 * @param[in] value eBPF program name
 *
 * Responses:
 *
 */
void update_dyntmon_dataplane_name_by_id(const std::string &name,
                                         const std::string &value) {
  auto dyntmon = get_cube(name);
  auto dataplane = dyntmon->getDataplane();
  return dataplane->setName(value);
}

/**
 * @brief   Update dyntmon by ID
 *
 * Update operation of resource: dyntmon*
 *
 * @param[in] value dyntmonbody object
 *
 * Responses:
 *
 */
void update_dyntmon_list_by_id(const std::vector<DyntmonJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/*
 * help related
 */

std::vector<nlohmann::fifo_map<std::string, std::string>>
read_dyntmon_dataplane_metrics_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&dyntmon = get_cube(name);
  auto &&dataplane = dyntmon->getDataplane();
  auto &&metrics = dataplane->getMetricsList();
  for (auto &i : metrics) {
    nlohmann::fifo_map<std::string, std::string> keys;
    keys["name"] = i->getName();
    r.push_back(keys);
  }
  return r;
}

std::vector<nlohmann::fifo_map<std::string, std::string>>
read_dyntmon_dataplane_metrics_open_metrics_metadata_label_list_by_id_get_list(
    const std::string &name, const std::string &metricsName) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&dyntmon = get_cube(name);
  auto &&dataplane = dyntmon->getDataplane();
  auto &&metrics = dataplane->getMetrics(metricsName);
  auto &&openMetricsMetadata = metrics->getOpenMetricsMetadata();

  auto &&label = openMetricsMetadata->getLabelList();
  for (auto &i : label) {
    nlohmann::fifo_map<std::string, std::string> keys;
    keys["name"] = i->getName();
    r.push_back(keys);
  }
  return r;
}

std::vector<nlohmann::fifo_map<std::string, std::string>>
read_dyntmon_metrics_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&dyntmon = get_cube(name);
  auto &&metrics = dyntmon->getMetricsList();
  for (auto &i : metrics) {
    nlohmann::fifo_map<std::string, std::string> keys;
    keys["name"] = i->getName();
    r.push_back(keys);
  }
  return r;
}

}  // namespace DyntmonApiImpl

}  // namespace api
}  // namespace service
}  // namespace polycube
