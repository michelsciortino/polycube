/**
* dyntmon API generated from dyntmon.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* DyntmonJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"

#include "DataplaneJsonObject.h"
#include "MetricsJsonObject.h"
#include <vector>
#include "polycube/services/cube.h"

namespace polycube {
namespace service {
namespace model {


/// <summary>
///
/// </summary>
class  DyntmonJsonObject : public JsonObjectBase {
public:
  DyntmonJsonObject();
  DyntmonJsonObject(const nlohmann::json &json);
  ~DyntmonJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Name of the dyntmon service
  /// </summary>
  std::string getName() const;
  void setName(std::string value);
  bool nameIsSet() const;

  /// <summary>
  /// Running probe
  /// </summary>
  DataplaneJsonObject getDataplane() const;
  void setDataplane(DataplaneJsonObject value);
  bool dataplaneIsSet() const;
  void unsetDataplane();

  /// <summary>
  /// Collected metrics
  /// </summary>
  const std::vector<MetricsJsonObject>& getMetrics() const;
  void addMetrics(MetricsJsonObject value);
  bool metricsIsSet() const;
  void unsetMetrics();

  /// <summary>
  /// Collected metrics in OpenMetrics Format
  /// </summary>
  std::string getOpenMetrics() const;
  void setOpenMetrics(std::string value);
  bool openMetricsIsSet() const;
  void unsetOpenMetrics();

private:
  std::string m_name;
  bool m_nameIsSet;
  DataplaneJsonObject m_dataplane;
  bool m_dataplaneIsSet;
  std::vector<MetricsJsonObject> m_metrics;
  bool m_metricsIsSet;
  std::string m_openMetrics;
  bool m_openMetricsIsSet;
};

}
}
}

