/**
* dynmonitor API generated from dynmonitor.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


#pragma once


#include "../base/MetricsEntryBase.h"

#include "MetricsEntryLables.h"

class Metrics;

using namespace polycube::service::model;

class MetricsEntry : public MetricsEntryBase {
 public:
  MetricsEntry(Metrics &parent, const MetricsEntryJsonObject &conf);
  virtual ~MetricsEntry();

  /// <summary>
  /// Metric&#39;s name
  /// </summary>
  std::string getName() override;

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<MetricsEntryLables> getLables(const std::string &name) override;
  std::vector<std::shared_ptr<MetricsEntryLables>> getLablesList() override;
  void addLables(const std::string &name, const MetricsEntryLablesJsonObject &conf) override;
  void addLablesList(const std::vector<MetricsEntryLablesJsonObject> &conf) override;
  void replaceLables(const std::string &name, const MetricsEntryLablesJsonObject &conf) override;
  void delLables(const std::string &name) override;
  void delLablesList() override;

  /// <summary>
  /// Metric&#39;s value
  /// </summary>
  double getValue() override;
  void setValue(const double &value) override;

  /// <summary>
  /// Timestamp
  /// </summary>
  int64_t getTimestamp() override;
  void setTimestamp(const int64_t &value) override;
};
