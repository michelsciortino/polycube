/**
* dynmonitor API generated from dynmonitor.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "DynmonitorApiImpl.h"

namespace polycube {
namespace service {
namespace api {

using namespace polycube::service::model;

namespace DynmonitorApiImpl {
namespace {
std::unordered_map<std::string, std::shared_ptr<Dynmonitor>> cubes;
std::mutex cubes_mutex;

std::shared_ptr<Dynmonitor> get_cube(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  auto iter = cubes.find(name);
  if (iter == cubes.end()) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }

  return iter->second;
}

}

void create_dynmonitor_by_id(const std::string &name, const DynmonitorJsonObject &jsonObject) {
  {
    // check if name is valid before creating it
    std::lock_guard<std::mutex> guard(cubes_mutex);
    if (cubes.count(name) != 0) {
      throw std::runtime_error("There is already a cube with name " + name);
    }
  }
  auto ptr = std::make_shared<Dynmonitor>(name, jsonObject);
  std::unordered_map<std::string, std::shared_ptr<Dynmonitor>>::iterator iter;
  bool inserted;

  std::lock_guard<std::mutex> guard(cubes_mutex);
  std::tie(iter, inserted) = cubes.emplace(name, std::move(ptr));

  if (!inserted) {
    throw std::runtime_error("There is already a cube with name " + name);
  }
}

void replace_dynmonitor_by_id(const std::string &name, const DynmonitorJsonObject &bridge){
  throw std::runtime_error("Method not supported!");
}

void delete_dynmonitor_by_id(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  if (cubes.count(name) == 0) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }
  cubes.erase(name);
}

std::vector<DynmonitorJsonObject> read_dynmonitor_list_by_id() {
  std::vector<DynmonitorJsonObject> jsonObject_vect;
  for(auto &i : cubes) {
    auto m = get_cube(i.first);
    jsonObject_vect.push_back(m->toJsonObject());
  }
  return jsonObject_vect;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_dynmonitor_list_by_id_get_list() {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  for (auto &x : cubes) {
    nlohmann::fifo_map<std::string, std::string> m;
    m["name"] = x.first;
    r.push_back(std::move(m));
  }
  return r;
}

/**
* @brief   Create dataplane by ID
*
* Create operation of resource: dataplane*
*
* @param[in] name ID of name
* @param[in] value dataplanebody object
*
* Responses:
*
*/
void
create_dynmonitor_dataplane_by_id(const std::string &name, const DataplaneJsonObject &value) {
  auto dynmonitor = get_cube(name);

  return dynmonitor->addDataplane(value);
}

/**
* @brief   Create metrics by ID
*
* Create operation of resource: metrics*
*
* @param[in] name ID of name
* @param[in] value metricsbody object
*
* Responses:
*
*/
void
create_dynmonitor_dataplane_metrics_by_id(const std::string &name, const DataplaneMetricsJsonObject &value) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();

  return dataplane->addMetrics(value);
}

/**
* @brief   Create counters by ID
*
* Create operation of resource: counters*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
* @param[in] value countersbody object
*
* Responses:
*
*/
void
create_dynmonitor_dataplane_metrics_counters_by_id(const std::string &name, const std::string &countersName, const DataplaneMetricsCountersJsonObject &value) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();

  return metrics->addCounters(countersName, value);
}

/**
* @brief   Create lables by ID
*
* Create operation of resource: lables*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
* @param[in] lablesName ID of lables_name
* @param[in] value lablesbody object
*
* Responses:
*
*/
void
create_dynmonitor_dataplane_metrics_counters_lables_by_id(const std::string &name, const std::string &countersName, const std::string &lablesName, const DataplaneMetricsCountersLablesJsonObject &value) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  auto counters = metrics->getCounters(countersName);

  return counters->addLables(lablesName, value);
}

/**
* @brief   Create lables by ID
*
* Create operation of resource: lables*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
* @param[in] value lablesbody object
*
* Responses:
*
*/
void
create_dynmonitor_dataplane_metrics_counters_lables_list_by_id(const std::string &name, const std::string &countersName, const std::vector<DataplaneMetricsCountersLablesJsonObject> &value) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  auto counters = metrics->getCounters(countersName);
  counters->addLablesList(value);
}

/**
* @brief   Create counters by ID
*
* Create operation of resource: counters*
*
* @param[in] name ID of name
* @param[in] value countersbody object
*
* Responses:
*
*/
void
create_dynmonitor_dataplane_metrics_counters_list_by_id(const std::string &name, const std::vector<DataplaneMetricsCountersJsonObject> &value) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  metrics->addCountersList(value);
}

/**
* @brief   Delete dataplane by ID
*
* Delete operation of resource: dataplane*
*
* @param[in] name ID of name
*
* Responses:
*
*/
void
delete_dynmonitor_dataplane_by_id(const std::string &name) {
  auto dynmonitor = get_cube(name);

  return dynmonitor->delDataplane();
}

/**
* @brief   Delete metrics by ID
*
* Delete operation of resource: metrics*
*
* @param[in] name ID of name
*
* Responses:
*
*/
void
delete_dynmonitor_dataplane_metrics_by_id(const std::string &name) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();

  return dataplane->delMetrics();
}

/**
* @brief   Delete counters by ID
*
* Delete operation of resource: counters*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
*
* Responses:
*
*/
void
delete_dynmonitor_dataplane_metrics_counters_by_id(const std::string &name, const std::string &countersName) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();

  return metrics->delCounters(countersName);
}

/**
* @brief   Delete lables by ID
*
* Delete operation of resource: lables*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
* @param[in] lablesName ID of lables_name
*
* Responses:
*
*/
void
delete_dynmonitor_dataplane_metrics_counters_lables_by_id(const std::string &name, const std::string &countersName, const std::string &lablesName) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  auto counters = metrics->getCounters(countersName);

  return counters->delLables(lablesName);
}

/**
* @brief   Delete lables by ID
*
* Delete operation of resource: lables*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
*
* Responses:
*
*/
void
delete_dynmonitor_dataplane_metrics_counters_lables_list_by_id(const std::string &name, const std::string &countersName) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  auto counters = metrics->getCounters(countersName);
  counters->delLablesList();
}

/**
* @brief   Delete counters by ID
*
* Delete operation of resource: counters*
*
* @param[in] name ID of name
*
* Responses:
*
*/
void
delete_dynmonitor_dataplane_metrics_counters_list_by_id(const std::string &name) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  metrics->delCountersList();
}

/**
* @brief   Read dynmonitor by ID
*
* Read operation of resource: dynmonitor*
*
* @param[in] name ID of name
*
* Responses:
* DynmonitorJsonObject
*/
DynmonitorJsonObject
read_dynmonitor_by_id(const std::string &name) {
  return get_cube(name)->toJsonObject();

}

/**
* @brief   Read dataplane by ID
*
* Read operation of resource: dataplane*
*
* @param[in] name ID of name
*
* Responses:
* DataplaneJsonObject
*/
DataplaneJsonObject
read_dynmonitor_dataplane_by_id(const std::string &name) {
  auto dynmonitor = get_cube(name);
  return dynmonitor->getDataplane()->toJsonObject();

}

/**
* @brief   Read code by ID
*
* Read operation of resource: code*
*
* @param[in] name ID of name
*
* Responses:
* std::string
*/
std::string
read_dynmonitor_dataplane_code_by_id(const std::string &name) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  return dataplane->getCode();

}

/**
* @brief   Read metrics by ID
*
* Read operation of resource: metrics*
*
* @param[in] name ID of name
*
* Responses:
* DataplaneMetricsJsonObject
*/
DataplaneMetricsJsonObject
read_dynmonitor_dataplane_metrics_by_id(const std::string &name) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  return dataplane->getMetrics()->toJsonObject();

}

/**
* @brief   Read counters by ID
*
* Read operation of resource: counters*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
*
* Responses:
* DataplaneMetricsCountersJsonObject
*/
DataplaneMetricsCountersJsonObject
read_dynmonitor_dataplane_metrics_counters_by_id(const std::string &name, const std::string &countersName) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  return metrics->getCounters(countersName)->toJsonObject();

}

/**
* @brief   Read lables by ID
*
* Read operation of resource: lables*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
* @param[in] lablesName ID of lables_name
*
* Responses:
* DataplaneMetricsCountersLablesJsonObject
*/
DataplaneMetricsCountersLablesJsonObject
read_dynmonitor_dataplane_metrics_counters_lables_by_id(const std::string &name, const std::string &countersName, const std::string &lablesName) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  auto counters = metrics->getCounters(countersName);
  return counters->getLables(lablesName)->toJsonObject();

}

/**
* @brief   Read lables by ID
*
* Read operation of resource: lables*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
*
* Responses:
* std::vector<DataplaneMetricsCountersLablesJsonObject>
*/
std::vector<DataplaneMetricsCountersLablesJsonObject>
read_dynmonitor_dataplane_metrics_counters_lables_list_by_id(const std::string &name, const std::string &countersName) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  auto counters = metrics->getCounters(countersName);
  auto &&lables = counters->getLablesList();
  std::vector<DataplaneMetricsCountersLablesJsonObject> m;
  for(auto &i : lables)
    m.push_back(i->toJsonObject());
  return m;
}

/**
* @brief   Read counters by ID
*
* Read operation of resource: counters*
*
* @param[in] name ID of name
*
* Responses:
* std::vector<DataplaneMetricsCountersJsonObject>
*/
std::vector<DataplaneMetricsCountersJsonObject>
read_dynmonitor_dataplane_metrics_counters_list_by_id(const std::string &name) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  auto &&counters = metrics->getCountersList();
  std::vector<DataplaneMetricsCountersJsonObject> m;
  for(auto &i : counters)
    m.push_back(i->toJsonObject());
  return m;
}

/**
* @brief   Read min-entries by ID
*
* Read operation of resource: min-entries*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
*
* Responses:
* uint64_t
*/
uint64_t
read_dynmonitor_dataplane_metrics_counters_min_entries_by_id(const std::string &name, const std::string &countersName) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  auto counters = metrics->getCounters(countersName);
  return counters->getMinEntries();

}

/**
* @brief   Read table-name by ID
*
* Read operation of resource: table-name*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
*
* Responses:
* std::string
*/
std::string
read_dynmonitor_dataplane_metrics_counters_table_name_by_id(const std::string &name, const std::string &countersName) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  auto counters = metrics->getCounters(countersName);
  return counters->getTableName();

}

/**
* @brief   Read table-type by ID
*
* Read operation of resource: table-type*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
*
* Responses:
* std::string
*/
std::string
read_dynmonitor_dataplane_metrics_counters_table_type_by_id(const std::string &name, const std::string &countersName) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  auto counters = metrics->getCounters(countersName);
  return counters->getTableType();

}

/**
* @brief   Read name by ID
*
* Read operation of resource: name*
*
* @param[in] name ID of name
*
* Responses:
* std::string
*/
std::string
read_dynmonitor_dataplane_name_by_id(const std::string &name) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  return dataplane->getName();

}

/**
* @brief   Read metrics by ID
*
* Read operation of resource: metrics*
*
* @param[in] name ID of name
*
* Responses:
* MetricsJsonObject
*/
MetricsJsonObject
read_dynmonitor_metrics_by_id(const std::string &name) {
  auto dynmonitor = get_cube(name);
  return dynmonitor->getMetrics()->toJsonObject();

}

/**
* @brief   Read entry by ID
*
* Read operation of resource: entry*
*
* @param[in] name ID of name
* @param[in] entryName ID of entry_name
*
* Responses:
* MetricsEntryJsonObject
*/
MetricsEntryJsonObject
read_dynmonitor_metrics_entry_by_id(const std::string &name, const std::string &entryName) {
  auto dynmonitor = get_cube(name);
  auto metrics = dynmonitor->getMetrics();
  return metrics->getEntry(entryName)->toJsonObject();

}

/**
* @brief   Read lables by ID
*
* Read operation of resource: lables*
*
* @param[in] name ID of name
* @param[in] entryName ID of entry_name
* @param[in] lablesName ID of lables_name
*
* Responses:
* MetricsEntryLablesJsonObject
*/
MetricsEntryLablesJsonObject
read_dynmonitor_metrics_entry_lables_by_id(const std::string &name, const std::string &entryName, const std::string &lablesName) {
  auto dynmonitor = get_cube(name);
  auto metrics = dynmonitor->getMetrics();
  auto entry = metrics->getEntry(entryName);
  return entry->getLables(lablesName)->toJsonObject();

}

/**
* @brief   Read lables by ID
*
* Read operation of resource: lables*
*
* @param[in] name ID of name
* @param[in] entryName ID of entry_name
*
* Responses:
* std::vector<MetricsEntryLablesJsonObject>
*/
std::vector<MetricsEntryLablesJsonObject>
read_dynmonitor_metrics_entry_lables_list_by_id(const std::string &name, const std::string &entryName) {
  auto dynmonitor = get_cube(name);
  auto metrics = dynmonitor->getMetrics();
  auto entry = metrics->getEntry(entryName);
  auto &&lables = entry->getLablesList();
  std::vector<MetricsEntryLablesJsonObject> m;
  for(auto &i : lables)
    m.push_back(i->toJsonObject());
  return m;
}

/**
* @brief   Read value by ID
*
* Read operation of resource: value*
*
* @param[in] name ID of name
* @param[in] entryName ID of entry_name
* @param[in] lablesName ID of lables_name
*
* Responses:
* std::string
*/
std::string
read_dynmonitor_metrics_entry_lables_value_by_id(const std::string &name, const std::string &entryName, const std::string &lablesName) {
  auto dynmonitor = get_cube(name);
  auto metrics = dynmonitor->getMetrics();
  auto entry = metrics->getEntry(entryName);
  auto lables = entry->getLables(lablesName);
  return lables->getValue();

}

/**
* @brief   Read entry by ID
*
* Read operation of resource: entry*
*
* @param[in] name ID of name
*
* Responses:
* std::vector<MetricsEntryJsonObject>
*/
std::vector<MetricsEntryJsonObject>
read_dynmonitor_metrics_entry_list_by_id(const std::string &name) {
  auto dynmonitor = get_cube(name);
  auto metrics = dynmonitor->getMetrics();
  auto &&entry = metrics->getEntryList();
  std::vector<MetricsEntryJsonObject> m;
  for(auto &i : entry)
    m.push_back(i->toJsonObject());
  return m;
}

/**
* @brief   Read timestamp by ID
*
* Read operation of resource: timestamp*
*
* @param[in] name ID of name
* @param[in] entryName ID of entry_name
*
* Responses:
* int64_t
*/
int64_t
read_dynmonitor_metrics_entry_timestamp_by_id(const std::string &name, const std::string &entryName) {
  auto dynmonitor = get_cube(name);
  auto metrics = dynmonitor->getMetrics();
  auto entry = metrics->getEntry(entryName);
  return entry->getTimestamp();

}

/**
* @brief   Read value by ID
*
* Read operation of resource: value*
*
* @param[in] name ID of name
* @param[in] entryName ID of entry_name
*
* Responses:
* double
*/
double
read_dynmonitor_metrics_entry_value_by_id(const std::string &name, const std::string &entryName) {
  auto dynmonitor = get_cube(name);
  auto metrics = dynmonitor->getMetrics();
  auto entry = metrics->getEntry(entryName);
  return entry->getValue();

}

/**
* @brief   Replace dataplane by ID
*
* Replace operation of resource: dataplane*
*
* @param[in] name ID of name
* @param[in] value dataplanebody object
*
* Responses:
*
*/
void
replace_dynmonitor_dataplane_by_id(const std::string &name, const DataplaneJsonObject &value) {
  auto dynmonitor = get_cube(name);

  return dynmonitor->replaceDataplane(value);
}

/**
* @brief   Replace metrics by ID
*
* Replace operation of resource: metrics*
*
* @param[in] name ID of name
* @param[in] value metricsbody object
*
* Responses:
*
*/
void
replace_dynmonitor_dataplane_metrics_by_id(const std::string &name, const DataplaneMetricsJsonObject &value) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();

  return dataplane->replaceMetrics(value);
}

/**
* @brief   Replace counters by ID
*
* Replace operation of resource: counters*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
* @param[in] value countersbody object
*
* Responses:
*
*/
void
replace_dynmonitor_dataplane_metrics_counters_by_id(const std::string &name, const std::string &countersName, const DataplaneMetricsCountersJsonObject &value) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();

  return metrics->replaceCounters(countersName, value);
}

/**
* @brief   Replace lables by ID
*
* Replace operation of resource: lables*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
* @param[in] lablesName ID of lables_name
* @param[in] value lablesbody object
*
* Responses:
*
*/
void
replace_dynmonitor_dataplane_metrics_counters_lables_by_id(const std::string &name, const std::string &countersName, const std::string &lablesName, const DataplaneMetricsCountersLablesJsonObject &value) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  auto counters = metrics->getCounters(countersName);

  return counters->replaceLables(lablesName, value);
}

/**
* @brief   Replace lables by ID
*
* Replace operation of resource: lables*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
* @param[in] value lablesbody object
*
* Responses:
*
*/
void
replace_dynmonitor_dataplane_metrics_counters_lables_list_by_id(const std::string &name, const std::string &countersName, const std::vector<DataplaneMetricsCountersLablesJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Replace counters by ID
*
* Replace operation of resource: counters*
*
* @param[in] name ID of name
* @param[in] value countersbody object
*
* Responses:
*
*/
void
replace_dynmonitor_dataplane_metrics_counters_list_by_id(const std::string &name, const std::vector<DataplaneMetricsCountersJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update dynmonitor by ID
*
* Update operation of resource: dynmonitor*
*
* @param[in] name ID of name
* @param[in] value dynmonitorbody object
*
* Responses:
*
*/
void
update_dynmonitor_by_id(const std::string &name, const DynmonitorJsonObject &value) {
  auto dynmonitor = get_cube(name);

  return dynmonitor->update(value);
}

/**
* @brief   Update dataplane by ID
*
* Update operation of resource: dataplane*
*
* @param[in] name ID of name
* @param[in] value dataplanebody object
*
* Responses:
*
*/
void
update_dynmonitor_dataplane_by_id(const std::string &name, const DataplaneJsonObject &value) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();

  return dataplane->update(value);
}

/**
* @brief   Update code by ID
*
* Update operation of resource: code*
*
* @param[in] name ID of name
* @param[in] value eBPF code
*
* Responses:
*
*/
void
update_dynmonitor_dataplane_code_by_id(const std::string &name, const std::string &value) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();

  return dataplane->setCode(value);
}

/**
* @brief   Update metrics by ID
*
* Update operation of resource: metrics*
*
* @param[in] name ID of name
* @param[in] value metricsbody object
*
* Responses:
*
*/
void
update_dynmonitor_dataplane_metrics_by_id(const std::string &name, const DataplaneMetricsJsonObject &value) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();

  return metrics->update(value);
}

/**
* @brief   Update counters by ID
*
* Update operation of resource: counters*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
* @param[in] value countersbody object
*
* Responses:
*
*/
void
update_dynmonitor_dataplane_metrics_counters_by_id(const std::string &name, const std::string &countersName, const DataplaneMetricsCountersJsonObject &value) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  auto counters = metrics->getCounters(countersName);

  return counters->update(value);
}

/**
* @brief   Update lables by ID
*
* Update operation of resource: lables*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
* @param[in] lablesName ID of lables_name
* @param[in] value lablesbody object
*
* Responses:
*
*/
void
update_dynmonitor_dataplane_metrics_counters_lables_by_id(const std::string &name, const std::string &countersName, const std::string &lablesName, const DataplaneMetricsCountersLablesJsonObject &value) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  auto counters = metrics->getCounters(countersName);
  auto lables = counters->getLables(lablesName);

  return lables->update(value);
}

/**
* @brief   Update lables by ID
*
* Update operation of resource: lables*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
* @param[in] value lablesbody object
*
* Responses:
*
*/
void
update_dynmonitor_dataplane_metrics_counters_lables_list_by_id(const std::string &name, const std::string &countersName, const std::vector<DataplaneMetricsCountersLablesJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update counters by ID
*
* Update operation of resource: counters*
*
* @param[in] name ID of name
* @param[in] value countersbody object
*
* Responses:
*
*/
void
update_dynmonitor_dataplane_metrics_counters_list_by_id(const std::string &name, const std::vector<DataplaneMetricsCountersJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update min-entries by ID
*
* Update operation of resource: min-entries*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
* @param[in] value Max number of entries in the table
*
* Responses:
*
*/
void
update_dynmonitor_dataplane_metrics_counters_min_entries_by_id(const std::string &name, const std::string &countersName, const uint64_t &value) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  auto counters = metrics->getCounters(countersName);

  return counters->setMinEntries(value);
}

/**
* @brief   Update table-name by ID
*
* Update operation of resource: table-name*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
* @param[in] value The corrisponding eBPF Table name
*
* Responses:
*
*/
void
update_dynmonitor_dataplane_metrics_counters_table_name_by_id(const std::string &name, const std::string &countersName, const std::string &value) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  auto counters = metrics->getCounters(countersName);

  return counters->setTableName(value);
}

/**
* @brief   Update table-type by ID
*
* Update operation of resource: table-type*
*
* @param[in] name ID of name
* @param[in] countersName ID of counters_name
* @param[in] value table-typebody object
*
* Responses:
*
*/
void
update_dynmonitor_dataplane_metrics_counters_table_type_by_id(const std::string &name, const std::string &countersName, const std::string &value) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();
  auto metrics = dataplane->getMetrics();
  auto counters = metrics->getCounters(countersName);

  return counters->setTableType(value);
}

/**
* @brief   Update name by ID
*
* Update operation of resource: name*
*
* @param[in] name ID of name
* @param[in] value Program name
*
* Responses:
*
*/
void
update_dynmonitor_dataplane_name_by_id(const std::string &name, const std::string &value) {
  auto dynmonitor = get_cube(name);
  auto dataplane = dynmonitor->getDataplane();

  return dataplane->setName(value);
}

/**
* @brief   Update dynmonitor by ID
*
* Update operation of resource: dynmonitor*
*
* @param[in] value dynmonitorbody object
*
* Responses:
*
*/
void
update_dynmonitor_list_by_id(const std::vector<DynmonitorJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}



/*
 * help related
 */

std::vector<nlohmann::fifo_map<std::string, std::string>> read_dynmonitor_dataplane_metrics_counters_lables_list_by_id_get_list(const std::string &name, const std::string &countersName) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&dynmonitor = get_cube(name);
  auto &&dataplane = dynmonitor->getDataplane();
  auto &&metrics = dataplane->getMetrics();
  auto &&counters = metrics->getCounters(countersName);

  auto &&lables = counters->getLablesList();
  for(auto &i : lables) {
    nlohmann::fifo_map<std::string, std::string> keys;

    keys["name"] = i->getName();

    r.push_back(keys);
  }
  return r;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_dynmonitor_dataplane_metrics_counters_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&dynmonitor = get_cube(name);
  auto &&dataplane = dynmonitor->getDataplane();
  auto &&metrics = dataplane->getMetrics();

  auto &&counters = metrics->getCountersList();
  for(auto &i : counters) {
    nlohmann::fifo_map<std::string, std::string> keys;

    keys["name"] = i->getName();

    r.push_back(keys);
  }
  return r;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_dynmonitor_metrics_entry_lables_list_by_id_get_list(const std::string &name, const std::string &entryName) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&dynmonitor = get_cube(name);
  auto &&metrics = dynmonitor->getMetrics();
  auto &&entry = metrics->getEntry(entryName);

  auto &&lables = entry->getLablesList();
  for(auto &i : lables) {
    nlohmann::fifo_map<std::string, std::string> keys;

    keys["name"] = i->getName();

    r.push_back(keys);
  }
  return r;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_dynmonitor_metrics_entry_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&dynmonitor = get_cube(name);
  auto &&metrics = dynmonitor->getMetrics();

  auto &&entry = metrics->getEntryList();
  for(auto &i : entry) {
    nlohmann::fifo_map<std::string, std::string> keys;

    keys["name"] = i->getName();

    r.push_back(keys);
  }
  return r;
}


}

}
}
}

