/**
* dynmonitor API generated from dynmonitor.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "DynmonitorApi.h"
#include "DynmonitorApiImpl.h"

using namespace polycube::service::model;
using namespace polycube::service::api::DynmonitorApiImpl;

#ifdef __cplusplus
extern "C" {
#endif

Response create_dynmonitor_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    DynmonitorJsonObject unique_value { request_body };

    unique_value.setName(unique_name);
    create_dynmonitor_by_id(unique_name, unique_value);
    return { kCreated, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response create_dynmonitor_dataplane_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    DataplaneJsonObject unique_value { request_body };

    create_dynmonitor_dataplane_by_id(unique_name, unique_value);
    return { kCreated, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response create_dynmonitor_dataplane_metrics_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    DataplaneMetricsJsonObject unique_value { request_body };

    create_dynmonitor_dataplane_metrics_by_id(unique_name, unique_value);
    return { kCreated, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response create_dynmonitor_dataplane_metrics_counters_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }


  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    DataplaneMetricsCountersJsonObject unique_value { request_body };

    unique_value.setName(unique_countersName);
    create_dynmonitor_dataplane_metrics_counters_by_id(unique_name, unique_countersName, unique_value);
    return { kCreated, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response create_dynmonitor_dataplane_metrics_counters_lables_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }

  std::string unique_lablesName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "lables_name")) {
      unique_lablesName = std::string { keys[i].value.string };
      break;
    }
  }


  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    DataplaneMetricsCountersLablesJsonObject unique_value { request_body };

    unique_value.setName(unique_lablesName);
    create_dynmonitor_dataplane_metrics_counters_lables_by_id(unique_name, unique_countersName, unique_lablesName, unique_value);
    return { kCreated, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response create_dynmonitor_dataplane_metrics_counters_lables_list_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }

  // Getting the body param
  std::vector<DataplaneMetricsCountersLablesJsonObject> unique_value;

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    std::vector<DataplaneMetricsCountersLablesJsonObject> unique_value;
    for (auto &j : request_body) {
      DataplaneMetricsCountersLablesJsonObject a { j };
      unique_value.push_back(a);
    }
    create_dynmonitor_dataplane_metrics_counters_lables_list_by_id(unique_name, unique_countersName, unique_value);
    return { kCreated, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response create_dynmonitor_dataplane_metrics_counters_list_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };
  // Getting the body param
  std::vector<DataplaneMetricsCountersJsonObject> unique_value;

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    std::vector<DataplaneMetricsCountersJsonObject> unique_value;
    for (auto &j : request_body) {
      DataplaneMetricsCountersJsonObject a { j };
      unique_value.push_back(a);
    }
    create_dynmonitor_dataplane_metrics_counters_list_by_id(unique_name, unique_value);
    return { kCreated, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response delete_dynmonitor_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };

  try {
    delete_dynmonitor_by_id(unique_name);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response delete_dynmonitor_dataplane_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };

  try {
    delete_dynmonitor_dataplane_by_id(unique_name);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response delete_dynmonitor_dataplane_metrics_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };

  try {
    delete_dynmonitor_dataplane_metrics_by_id(unique_name);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response delete_dynmonitor_dataplane_metrics_counters_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }


  try {
    delete_dynmonitor_dataplane_metrics_counters_by_id(unique_name, unique_countersName);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response delete_dynmonitor_dataplane_metrics_counters_lables_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }

  std::string unique_lablesName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "lables_name")) {
      unique_lablesName = std::string { keys[i].value.string };
      break;
    }
  }


  try {
    delete_dynmonitor_dataplane_metrics_counters_lables_by_id(unique_name, unique_countersName, unique_lablesName);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response delete_dynmonitor_dataplane_metrics_counters_lables_list_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }


  try {
    delete_dynmonitor_dataplane_metrics_counters_lables_list_by_id(unique_name, unique_countersName);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response delete_dynmonitor_dataplane_metrics_counters_list_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };

  try {
    delete_dynmonitor_dataplane_metrics_counters_list_by_id(unique_name);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };

  try {

    auto x = read_dynmonitor_by_id(unique_name);
    nlohmann::json response_body;
    response_body = x.toJson();
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_dataplane_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };

  try {

    auto x = read_dynmonitor_dataplane_by_id(unique_name);
    nlohmann::json response_body;
    response_body = x.toJson();
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_dataplane_code_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };

  try {

    auto x = read_dynmonitor_dataplane_code_by_id(unique_name);
    nlohmann::json response_body;
    response_body = x;
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_dataplane_metrics_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };

  try {

    auto x = read_dynmonitor_dataplane_metrics_by_id(unique_name);
    nlohmann::json response_body;
    response_body = x.toJson();
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_dataplane_metrics_counters_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }


  try {

    auto x = read_dynmonitor_dataplane_metrics_counters_by_id(unique_name, unique_countersName);
    nlohmann::json response_body;
    response_body = x.toJson();
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_dataplane_metrics_counters_lables_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }

  std::string unique_lablesName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "lables_name")) {
      unique_lablesName = std::string { keys[i].value.string };
      break;
    }
  }


  try {

    auto x = read_dynmonitor_dataplane_metrics_counters_lables_by_id(unique_name, unique_countersName, unique_lablesName);
    nlohmann::json response_body;
    response_body = x.toJson();
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_dataplane_metrics_counters_lables_list_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }


  try {

    auto x = read_dynmonitor_dataplane_metrics_counters_lables_list_by_id(unique_name, unique_countersName);
    nlohmann::json response_body;
    for (auto &i : x) {
      response_body += i.toJson();
    }
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_dataplane_metrics_counters_list_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };

  try {

    auto x = read_dynmonitor_dataplane_metrics_counters_list_by_id(unique_name);
    nlohmann::json response_body;
    for (auto &i : x) {
      response_body += i.toJson();
    }
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_dataplane_metrics_counters_min_entries_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }


  try {

    auto x = read_dynmonitor_dataplane_metrics_counters_min_entries_by_id(unique_name, unique_countersName);
    nlohmann::json response_body;
    response_body = x;
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_dataplane_metrics_counters_table_name_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }


  try {

    auto x = read_dynmonitor_dataplane_metrics_counters_table_name_by_id(unique_name, unique_countersName);
    nlohmann::json response_body;
    response_body = x;
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_dataplane_metrics_counters_table_type_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }


  try {

    auto x = read_dynmonitor_dataplane_metrics_counters_table_type_by_id(unique_name, unique_countersName);
    nlohmann::json response_body;
    response_body = x;
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_dataplane_name_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };

  try {

    auto x = read_dynmonitor_dataplane_name_by_id(unique_name);
    nlohmann::json response_body;
    response_body = x;
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_list_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {


  try {

    auto x = read_dynmonitor_list_by_id();
    nlohmann::json response_body;
    for (auto &i : x) {
      response_body += i.toJson();
    }
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_metrics_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };

  try {

    auto x = read_dynmonitor_metrics_by_id(unique_name);
    nlohmann::json response_body;
    response_body = x.toJson();
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_metrics_entry_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_entryName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "entry_name")) {
      unique_entryName = std::string { keys[i].value.string };
      break;
    }
  }


  try {

    auto x = read_dynmonitor_metrics_entry_by_id(unique_name, unique_entryName);
    nlohmann::json response_body;
    response_body = x.toJson();
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_metrics_entry_lables_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_entryName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "entry_name")) {
      unique_entryName = std::string { keys[i].value.string };
      break;
    }
  }

  std::string unique_lablesName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "lables_name")) {
      unique_lablesName = std::string { keys[i].value.string };
      break;
    }
  }


  try {

    auto x = read_dynmonitor_metrics_entry_lables_by_id(unique_name, unique_entryName, unique_lablesName);
    nlohmann::json response_body;
    response_body = x.toJson();
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_metrics_entry_lables_list_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_entryName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "entry_name")) {
      unique_entryName = std::string { keys[i].value.string };
      break;
    }
  }


  try {

    auto x = read_dynmonitor_metrics_entry_lables_list_by_id(unique_name, unique_entryName);
    nlohmann::json response_body;
    for (auto &i : x) {
      response_body += i.toJson();
    }
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_metrics_entry_lables_value_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_entryName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "entry_name")) {
      unique_entryName = std::string { keys[i].value.string };
      break;
    }
  }

  std::string unique_lablesName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "lables_name")) {
      unique_lablesName = std::string { keys[i].value.string };
      break;
    }
  }


  try {

    auto x = read_dynmonitor_metrics_entry_lables_value_by_id(unique_name, unique_entryName, unique_lablesName);
    nlohmann::json response_body;
    response_body = x;
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_metrics_entry_list_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };

  try {

    auto x = read_dynmonitor_metrics_entry_list_by_id(unique_name);
    nlohmann::json response_body;
    for (auto &i : x) {
      response_body += i.toJson();
    }
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_metrics_entry_timestamp_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_entryName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "entry_name")) {
      unique_entryName = std::string { keys[i].value.string };
      break;
    }
  }


  try {

    auto x = read_dynmonitor_metrics_entry_timestamp_by_id(unique_name, unique_entryName);
    nlohmann::json response_body;
    response_body = x;
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response read_dynmonitor_metrics_entry_value_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_entryName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "entry_name")) {
      unique_entryName = std::string { keys[i].value.string };
      break;
    }
  }


  try {

    auto x = read_dynmonitor_metrics_entry_value_by_id(unique_name, unique_entryName);
    nlohmann::json response_body;
    response_body = x;
    return { kOk, ::strdup(response_body.dump().c_str()) };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response replace_dynmonitor_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    DynmonitorJsonObject unique_value { request_body };

    unique_value.setName(unique_name);
    replace_dynmonitor_by_id(unique_name, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response replace_dynmonitor_dataplane_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    DataplaneJsonObject unique_value { request_body };

    replace_dynmonitor_dataplane_by_id(unique_name, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response replace_dynmonitor_dataplane_metrics_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    DataplaneMetricsJsonObject unique_value { request_body };

    replace_dynmonitor_dataplane_metrics_by_id(unique_name, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response replace_dynmonitor_dataplane_metrics_counters_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }


  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    DataplaneMetricsCountersJsonObject unique_value { request_body };

    unique_value.setName(unique_countersName);
    replace_dynmonitor_dataplane_metrics_counters_by_id(unique_name, unique_countersName, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response replace_dynmonitor_dataplane_metrics_counters_lables_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }

  std::string unique_lablesName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "lables_name")) {
      unique_lablesName = std::string { keys[i].value.string };
      break;
    }
  }


  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    DataplaneMetricsCountersLablesJsonObject unique_value { request_body };

    unique_value.setName(unique_lablesName);
    replace_dynmonitor_dataplane_metrics_counters_lables_by_id(unique_name, unique_countersName, unique_lablesName, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response replace_dynmonitor_dataplane_metrics_counters_lables_list_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }

  // Getting the body param
  std::vector<DataplaneMetricsCountersLablesJsonObject> unique_value;

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    std::vector<DataplaneMetricsCountersLablesJsonObject> unique_value;
    for (auto &j : request_body) {
      DataplaneMetricsCountersLablesJsonObject a { j };
      unique_value.push_back(a);
    }
    replace_dynmonitor_dataplane_metrics_counters_lables_list_by_id(unique_name, unique_countersName, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response replace_dynmonitor_dataplane_metrics_counters_list_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };
  // Getting the body param
  std::vector<DataplaneMetricsCountersJsonObject> unique_value;

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    std::vector<DataplaneMetricsCountersJsonObject> unique_value;
    for (auto &j : request_body) {
      DataplaneMetricsCountersJsonObject a { j };
      unique_value.push_back(a);
    }
    replace_dynmonitor_dataplane_metrics_counters_list_by_id(unique_name, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response update_dynmonitor_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    DynmonitorJsonObject unique_value { request_body };

    unique_value.setName(unique_name);
    update_dynmonitor_by_id(unique_name, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response update_dynmonitor_dataplane_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    DataplaneJsonObject unique_value { request_body };

    update_dynmonitor_dataplane_by_id(unique_name, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response update_dynmonitor_dataplane_code_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // The conversion is done automatically by the json library
    std::string unique_value = request_body;
    update_dynmonitor_dataplane_code_by_id(unique_name, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response update_dynmonitor_dataplane_metrics_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    DataplaneMetricsJsonObject unique_value { request_body };

    update_dynmonitor_dataplane_metrics_by_id(unique_name, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response update_dynmonitor_dataplane_metrics_counters_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }


  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    DataplaneMetricsCountersJsonObject unique_value { request_body };

    unique_value.setName(unique_countersName);
    update_dynmonitor_dataplane_metrics_counters_by_id(unique_name, unique_countersName, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response update_dynmonitor_dataplane_metrics_counters_lables_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }

  std::string unique_lablesName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "lables_name")) {
      unique_lablesName = std::string { keys[i].value.string };
      break;
    }
  }


  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    DataplaneMetricsCountersLablesJsonObject unique_value { request_body };

    unique_value.setName(unique_lablesName);
    update_dynmonitor_dataplane_metrics_counters_lables_by_id(unique_name, unique_countersName, unique_lablesName, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response update_dynmonitor_dataplane_metrics_counters_lables_list_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }

  // Getting the body param
  std::vector<DataplaneMetricsCountersLablesJsonObject> unique_value;

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    std::vector<DataplaneMetricsCountersLablesJsonObject> unique_value;
    for (auto &j : request_body) {
      DataplaneMetricsCountersLablesJsonObject a { j };
      unique_value.push_back(a);
    }
    update_dynmonitor_dataplane_metrics_counters_lables_list_by_id(unique_name, unique_countersName, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response update_dynmonitor_dataplane_metrics_counters_list_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };
  // Getting the body param
  std::vector<DataplaneMetricsCountersJsonObject> unique_value;

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    std::vector<DataplaneMetricsCountersJsonObject> unique_value;
    for (auto &j : request_body) {
      DataplaneMetricsCountersJsonObject a { j };
      unique_value.push_back(a);
    }
    update_dynmonitor_dataplane_metrics_counters_list_by_id(unique_name, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response update_dynmonitor_dataplane_metrics_counters_min_entries_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }


  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // The conversion is done automatically by the json library
    uint64_t unique_value = request_body;
    update_dynmonitor_dataplane_metrics_counters_min_entries_by_id(unique_name, unique_countersName, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response update_dynmonitor_dataplane_metrics_counters_table_name_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }


  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // The conversion is done automatically by the json library
    std::string unique_value = request_body;
    update_dynmonitor_dataplane_metrics_counters_table_name_by_id(unique_name, unique_countersName, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response update_dynmonitor_dataplane_metrics_counters_table_type_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }


  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // The conversion is done automatically by the json library
    std::string unique_value = request_body;
    update_dynmonitor_dataplane_metrics_counters_table_type_by_id(unique_name, unique_countersName, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response update_dynmonitor_dataplane_name_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {
  // Getting the path params
  std::string unique_name { name };

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // The conversion is done automatically by the json library
    std::string unique_value = request_body;
    update_dynmonitor_dataplane_name_by_id(unique_name, unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}

Response update_dynmonitor_list_by_id_handler(
  const char *name, const Key *keys,
  size_t num_keys ,
  const char *value) {

  // Getting the body param
  std::vector<DynmonitorJsonObject> unique_value;

  try {
    auto request_body = nlohmann::json::parse(std::string { value });
    // Getting the body param
    std::vector<DynmonitorJsonObject> unique_value;
    for (auto &j : request_body) {
      DynmonitorJsonObject a { j };
      unique_value.push_back(a);
    }
    update_dynmonitor_list_by_id(unique_value);
    return { kOk, nullptr };
  } catch(const std::exception &e) {
    return { kGenericError, ::strdup(e.what()) };
  }
}


Response dynmonitor_dataplane_metrics_counters_lables_list_by_id_help(
  const char *name, const Key *keys, size_t num_keys) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_countersName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "counters_name")) {
      unique_countersName = std::string { keys[i].value.string };
      break;
    }
  }

  nlohmann::json val = read_dynmonitor_dataplane_metrics_counters_lables_list_by_id_get_list(unique_name, unique_countersName);

  return { kOk, ::strdup(val.dump().c_str()) };
}

Response dynmonitor_dataplane_metrics_counters_list_by_id_help(
  const char *name, const Key *keys, size_t num_keys) {
  // Getting the path params
  std::string unique_name { name };
  nlohmann::json val = read_dynmonitor_dataplane_metrics_counters_list_by_id_get_list(unique_name);

  return { kOk, ::strdup(val.dump().c_str()) };
}

Response dynmonitor_list_by_id_help(
  const char *name, const Key *keys, size_t num_keys) {

  nlohmann::json val = read_dynmonitor_list_by_id_get_list();

  return { kOk, ::strdup(val.dump().c_str()) };
}

Response dynmonitor_metrics_entry_lables_list_by_id_help(
  const char *name, const Key *keys, size_t num_keys) {
  // Getting the path params
  std::string unique_name { name };
  std::string unique_entryName;
  for (size_t i = 0; i < num_keys; ++i) {
    if (!strcmp(keys[i].name, "entry_name")) {
      unique_entryName = std::string { keys[i].value.string };
      break;
    }
  }

  nlohmann::json val = read_dynmonitor_metrics_entry_lables_list_by_id_get_list(unique_name, unique_entryName);

  return { kOk, ::strdup(val.dump().c_str()) };
}

Response dynmonitor_metrics_entry_list_by_id_help(
  const char *name, const Key *keys, size_t num_keys) {
  // Getting the path params
  std::string unique_name { name };
  nlohmann::json val = read_dynmonitor_metrics_entry_list_by_id_get_list(unique_name);

  return { kOk, ::strdup(val.dump().c_str()) };
}

#ifdef __cplusplus
}
#endif

