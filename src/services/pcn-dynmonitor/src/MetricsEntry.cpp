/**
* dynmonitor API generated from dynmonitor.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


// TODO: Modify these methods with your own implementation


#include "MetricsEntry.h"
#include "Dynmonitor.h"


MetricsEntry::MetricsEntry(Metrics &parent, const MetricsEntryJsonObject &conf)
    : MetricsEntryBase(parent) {
  addLablesList(conf.getLables());
  if (conf.valueIsSet()) {
    setValue(conf.getValue());
  }

  if (conf.timestampIsSet()) {
    setTimestamp(conf.getTimestamp());
  }

}

MetricsEntry::~MetricsEntry() {}

std::string MetricsEntry::getName() {
  throw std::runtime_error("MetricsEntry::getName: Method not implemented");
}
std::shared_ptr<MetricsEntryLables> MetricsEntry::getLables(const std::string &name) {
  throw std::runtime_error("MetricsEntry::getEntry: Method not implemented");
}

std::vector<std::shared_ptr<MetricsEntryLables>> MetricsEntry::getLablesList() {
  throw std::runtime_error("MetricsEntry::getLablesList: Method not implemented");
}

void MetricsEntry::addLables(const std::string &name, const MetricsEntryLablesJsonObject &conf) {
  throw std::runtime_error("MetricsEntry::addLables: Method not implemented");
}

// Basic default implementation, place your extension here (if needed)
void MetricsEntry::addLablesList(const std::vector<MetricsEntryLablesJsonObject> &conf) {
  // call default implementation in base class
  MetricsEntryBase::addLablesList(conf);
}

// Basic default implementation, place your extension here (if needed)
void MetricsEntry::replaceLables(const std::string &name, const MetricsEntryLablesJsonObject &conf) {
  // call default implementation in base class
  MetricsEntryBase::replaceLables(name, conf);
}

void MetricsEntry::delLables(const std::string &name) {
  throw std::runtime_error("MetricsEntry::delLables: Method not implemented");
}

// Basic default implementation, place your extension here (if needed)
void MetricsEntry::delLablesList() {
  // call default implementation in base class
  MetricsEntryBase::delLablesList();
}

double MetricsEntry::getValue() {
  throw std::runtime_error("MetricsEntry::getValue: Method not implemented");
}

void MetricsEntry::setValue(const double &value) {
  throw std::runtime_error("MetricsEntry::setValue: Method not implemented");
}

int64_t MetricsEntry::getTimestamp() {
  throw std::runtime_error("MetricsEntry::getTimestamp: Method not implemented");
}

void MetricsEntry::setTimestamp(const int64_t &value) {
  throw std::runtime_error("MetricsEntry::setTimestamp: Method not implemented");
}


