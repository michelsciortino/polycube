/**
* dynmonitor API generated from dynmonitor.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


#pragma once


#include "../base/DataplaneMetricsCountersBase.h"

#include "DataplaneMetricsCountersLables.h"

class DataplaneMetrics;

using namespace polycube::service::model;

class DataplaneMetricsCounters : public DataplaneMetricsCountersBase {
 public:
  DataplaneMetricsCounters(DataplaneMetrics &parent, const DataplaneMetricsCountersJsonObject &conf);
  virtual ~DataplaneMetricsCounters();

  /// <summary>
  /// Counter name
  /// </summary>
  std::string getName() override;

  /// <summary>
  /// The corrisponding eBPF Table name
  /// </summary>
  std::string getTableName() override;
  void setTableName(const std::string &value) override;

  /// <summary>
  ///
  /// </summary>
  std::string getTableType() override;
  void setTableType(const std::string &value) override;

  /// <summary>
  /// Max number of entries in the table
  /// </summary>
  uint64_t getMinEntries() override;
  void setMinEntries(const uint64_t &value) override;

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<DataplaneMetricsCountersLables> getLables(const std::string &name) override;
  std::vector<std::shared_ptr<DataplaneMetricsCountersLables>> getLablesList() override;
  void addLables(const std::string &name, const DataplaneMetricsCountersLablesJsonObject &conf) override;
  void addLablesList(const std::vector<DataplaneMetricsCountersLablesJsonObject> &conf) override;
  void replaceLables(const std::string &name, const DataplaneMetricsCountersLablesJsonObject &conf) override;
  void delLables(const std::string &name) override;
  void delLablesList() override;
};
