/**
* dynmonitor API generated from dynmonitor.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "DataplaneMetricsJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

DataplaneMetricsJsonObject::DataplaneMetricsJsonObject() {
  m_countersIsSet = false;
}

DataplaneMetricsJsonObject::DataplaneMetricsJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_countersIsSet = false;


  if (val.count("counters")) {
    for (auto& item : val["counters"]) {
      DataplaneMetricsCountersJsonObject newItem{ item };
      m_counters.push_back(newItem);
    }

    m_countersIsSet = true;
  }
}

nlohmann::json DataplaneMetricsJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_counters) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["counters"] = jsonArray;
    }
  }

  return val;
}

const std::vector<DataplaneMetricsCountersJsonObject>& DataplaneMetricsJsonObject::getCounters() const{
  return m_counters;
}

void DataplaneMetricsJsonObject::addDataplaneMetricsCounters(DataplaneMetricsCountersJsonObject value) {
  m_counters.push_back(value);
  m_countersIsSet = true;
}


bool DataplaneMetricsJsonObject::countersIsSet() const {
  return m_countersIsSet;
}

void DataplaneMetricsJsonObject::unsetCounters() {
  m_countersIsSet = false;
}


}
}
}

