/**
* dynmonitor API generated from dynmonitor.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* DataplaneMetricsCountersJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"

#include "DataplaneMetricsCountersLablesJsonObject.h"
#include <vector>

namespace polycube {
namespace service {
namespace model {


/// <summary>
///
/// </summary>
class  DataplaneMetricsCountersJsonObject : public JsonObjectBase {
public:
  DataplaneMetricsCountersJsonObject();
  DataplaneMetricsCountersJsonObject(const nlohmann::json &json);
  ~DataplaneMetricsCountersJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Counter name
  /// </summary>
  std::string getName() const;
  void setName(std::string value);
  bool nameIsSet() const;

  /// <summary>
  /// The corrisponding eBPF Table name
  /// </summary>
  std::string getTableName() const;
  void setTableName(std::string value);
  bool tableNameIsSet() const;
  void unsetTableName();

  /// <summary>
  ///
  /// </summary>
  std::string getTableType() const;
  void setTableType(std::string value);
  bool tableTypeIsSet() const;
  void unsetTableType();

  /// <summary>
  /// Max number of entries in the table
  /// </summary>
  uint64_t getMinEntries() const;
  void setMinEntries(uint64_t value);
  bool minEntriesIsSet() const;
  void unsetMinEntries();

  /// <summary>
  ///
  /// </summary>
  const std::vector<DataplaneMetricsCountersLablesJsonObject>& getLables() const;
  void addDataplaneMetricsCountersLables(DataplaneMetricsCountersLablesJsonObject value);
  bool lablesIsSet() const;
  void unsetLables();

private:
  std::string m_name;
  bool m_nameIsSet;
  std::string m_tableName;
  bool m_tableNameIsSet;
  std::string m_tableType;
  bool m_tableTypeIsSet;
  uint64_t m_minEntries;
  bool m_minEntriesIsSet;
  std::vector<DataplaneMetricsCountersLablesJsonObject> m_lables;
  bool m_lablesIsSet;
};

}
}
}

