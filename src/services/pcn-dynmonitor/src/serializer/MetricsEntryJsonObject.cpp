/**
* dynmonitor API generated from dynmonitor.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "MetricsEntryJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

MetricsEntryJsonObject::MetricsEntryJsonObject() {
  m_nameIsSet = false;
  m_lablesIsSet = false;
  m_valueIsSet = false;
  m_timestampIsSet = false;
}

MetricsEntryJsonObject::MetricsEntryJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_lablesIsSet = false;
  m_valueIsSet = false;
  m_timestampIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("lables")) {
    for (auto& item : val["lables"]) {
      MetricsEntryLablesJsonObject newItem{ item };
      m_lables.push_back(newItem);
    }

    m_lablesIsSet = true;
  }

  if (val.count("value")) {
    setValue(val.at("value").get<double>());
  }

  if (val.count("timestamp")) {
    setTimestamp(val.at("timestamp").get<int64_t>());
  }
}

nlohmann::json MetricsEntryJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_lables) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["lables"] = jsonArray;
    }
  }

  if (m_valueIsSet) {
    val["value"] = m_value;
  }

  if (m_timestampIsSet) {
    val["timestamp"] = m_timestamp;
  }

  return val;
}

std::string MetricsEntryJsonObject::getName() const {
  return m_name;
}

void MetricsEntryJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool MetricsEntryJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



const std::vector<MetricsEntryLablesJsonObject>& MetricsEntryJsonObject::getLables() const{
  return m_lables;
}

void MetricsEntryJsonObject::addMetricsEntryLables(MetricsEntryLablesJsonObject value) {
  m_lables.push_back(value);
  m_lablesIsSet = true;
}


bool MetricsEntryJsonObject::lablesIsSet() const {
  return m_lablesIsSet;
}

void MetricsEntryJsonObject::unsetLables() {
  m_lablesIsSet = false;
}

double MetricsEntryJsonObject::getValue() const {
  return m_value;
}

void MetricsEntryJsonObject::setValue(double value) {
  m_value = value;
  m_valueIsSet = true;
}

bool MetricsEntryJsonObject::valueIsSet() const {
  return m_valueIsSet;
}

void MetricsEntryJsonObject::unsetValue() {
  m_valueIsSet = false;
}

int64_t MetricsEntryJsonObject::getTimestamp() const {
  return m_timestamp;
}

void MetricsEntryJsonObject::setTimestamp(int64_t value) {
  m_timestamp = value;
  m_timestampIsSet = true;
}

bool MetricsEntryJsonObject::timestampIsSet() const {
  return m_timestampIsSet;
}

void MetricsEntryJsonObject::unsetTimestamp() {
  m_timestampIsSet = false;
}


}
}
}

