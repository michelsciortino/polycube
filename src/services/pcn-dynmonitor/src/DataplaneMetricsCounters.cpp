/**
* dynmonitor API generated from dynmonitor.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


// TODO: Modify these methods with your own implementation


#include "DataplaneMetricsCounters.h"
#include "Dynmonitor.h"


DataplaneMetricsCounters::DataplaneMetricsCounters(DataplaneMetrics &parent, const DataplaneMetricsCountersJsonObject &conf)
    : DataplaneMetricsCountersBase(parent) {
  if (conf.tableNameIsSet()) {
    setTableName(conf.getTableName());
  }

  if (conf.tableTypeIsSet()) {
    setTableType(conf.getTableType());
  }

  if (conf.minEntriesIsSet()) {
    setMinEntries(conf.getMinEntries());
  }

  addLablesList(conf.getLables());
}

DataplaneMetricsCounters::~DataplaneMetricsCounters() {}

std::string DataplaneMetricsCounters::getName() {
  throw std::runtime_error("DataplaneMetricsCounters::getName: Method not implemented");
}

std::string DataplaneMetricsCounters::getTableName() {
  throw std::runtime_error("DataplaneMetricsCounters::getTableName: Method not implemented");
}

void DataplaneMetricsCounters::setTableName(const std::string &value) {
  throw std::runtime_error("DataplaneMetricsCounters::setTableName: Method not implemented");
}

std::string DataplaneMetricsCounters::getTableType() {
  throw std::runtime_error("DataplaneMetricsCounters::getTableType: Method not implemented");
}

void DataplaneMetricsCounters::setTableType(const std::string &value) {
  throw std::runtime_error("DataplaneMetricsCounters::setTableType: Method not implemented");
}

uint64_t DataplaneMetricsCounters::getMinEntries() {
  throw std::runtime_error("DataplaneMetricsCounters::getMinEntries: Method not implemented");
}

void DataplaneMetricsCounters::setMinEntries(const uint64_t &value) {
  throw std::runtime_error("DataplaneMetricsCounters::setMinEntries: Method not implemented");
}
std::shared_ptr<DataplaneMetricsCountersLables> DataplaneMetricsCounters::getLables(const std::string &name) {
  throw std::runtime_error("DataplaneMetricsCounters::getEntry: Method not implemented");
}

std::vector<std::shared_ptr<DataplaneMetricsCountersLables>> DataplaneMetricsCounters::getLablesList() {
  throw std::runtime_error("DataplaneMetricsCounters::getLablesList: Method not implemented");
}

void DataplaneMetricsCounters::addLables(const std::string &name, const DataplaneMetricsCountersLablesJsonObject &conf) {
  throw std::runtime_error("DataplaneMetricsCounters::addLables: Method not implemented");
}

// Basic default implementation, place your extension here (if needed)
void DataplaneMetricsCounters::addLablesList(const std::vector<DataplaneMetricsCountersLablesJsonObject> &conf) {
  // call default implementation in base class
  DataplaneMetricsCountersBase::addLablesList(conf);
}

// Basic default implementation, place your extension here (if needed)
void DataplaneMetricsCounters::replaceLables(const std::string &name, const DataplaneMetricsCountersLablesJsonObject &conf) {
  // call default implementation in base class
  DataplaneMetricsCountersBase::replaceLables(name, conf);
}

void DataplaneMetricsCounters::delLables(const std::string &name) {
  throw std::runtime_error("DataplaneMetricsCounters::delLables: Method not implemented");
}

// Basic default implementation, place your extension here (if needed)
void DataplaneMetricsCounters::delLablesList() {
  // call default implementation in base class
  DataplaneMetricsCountersBase::delLablesList();
}


