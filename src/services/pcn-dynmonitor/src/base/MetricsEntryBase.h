/**
* dynmonitor API generated from dynmonitor.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* MetricsEntryBase.h
*
*
*/

#pragma once

#include "../serializer/MetricsEntryJsonObject.h"

#include "../MetricsEntryLables.h"





#include <spdlog/spdlog.h>

using namespace polycube::service::model;

class Metrics;

class MetricsEntryBase {
 public:
  
  MetricsEntryBase(Metrics &parent);
  
  virtual ~MetricsEntryBase();
  virtual void update(const MetricsEntryJsonObject &conf);
  virtual MetricsEntryJsonObject toJsonObject();

  /// <summary>
  /// Metric&#39;s name
  /// </summary>
  virtual std::string getName() = 0;

  /// <summary>
  ///
  /// </summary>
  virtual std::shared_ptr<MetricsEntryLables> getLables(const std::string &name) = 0;
  virtual std::vector<std::shared_ptr<MetricsEntryLables>> getLablesList() = 0;
  virtual void addLables(const std::string &name, const MetricsEntryLablesJsonObject &conf) = 0;
  virtual void addLablesList(const std::vector<MetricsEntryLablesJsonObject> &conf);
  virtual void replaceLables(const std::string &name, const MetricsEntryLablesJsonObject &conf);
  virtual void delLables(const std::string &name) = 0;
  virtual void delLablesList();

  /// <summary>
  /// Metric&#39;s value
  /// </summary>
  virtual double getValue() = 0;
  virtual void setValue(const double &value) = 0;

  /// <summary>
  /// Timestamp
  /// </summary>
  virtual int64_t getTimestamp() = 0;
  virtual void setTimestamp(const int64_t &value) = 0;

  std::shared_ptr<spdlog::logger> logger();
 protected:
  Metrics &parent_;
};
