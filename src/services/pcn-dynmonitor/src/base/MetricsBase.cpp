/**
* dynmonitor API generated from dynmonitor.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "MetricsBase.h"
#include "../Dynmonitor.h"


MetricsBase::MetricsBase(Dynmonitor &parent)
    : parent_(parent) {}

MetricsBase::~MetricsBase() {}

void MetricsBase::update(const MetricsJsonObject &conf) {

  if (conf.entryIsSet()) {
    for (auto &i : conf.getEntry()) {
      auto name = i.getName();
      auto m = getEntry(name);
      m->update(i);
    }
  }
}

MetricsJsonObject MetricsBase::toJsonObject() {
  MetricsJsonObject conf;

  for(auto &i : getEntryList()) {
    conf.addMetricsEntry(i->toJsonObject());
  }

  return conf;
}
void MetricsBase::addEntryList(const std::vector<MetricsEntryJsonObject> &conf) {
  for (auto &i : conf) {
    std::string name_ = i.getName();
    addEntry(name_, i);
  }
}

void MetricsBase::replaceEntry(const std::string &name, const MetricsEntryJsonObject &conf) {
  delEntry(name);
  std::string name_ = conf.getName();
  addEntry(name_, conf);
}

void MetricsBase::delEntryList() {
  auto elements = getEntryList();
  for (auto &i : elements) {
    std::string name_ = i->getName();
    delEntry(name_);
  }
}

std::shared_ptr<spdlog::logger> MetricsBase::logger() {
  return parent_.logger();
}

