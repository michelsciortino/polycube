/**
* dynmonitor API generated from dynmonitor.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "DataplaneMetricsBase.h"
#include "../Dynmonitor.h"


DataplaneMetricsBase::DataplaneMetricsBase(Dataplane &parent)
    : parent_(parent) {}

DataplaneMetricsBase::~DataplaneMetricsBase() {}

void DataplaneMetricsBase::update(const DataplaneMetricsJsonObject &conf) {

  if (conf.countersIsSet()) {
    for (auto &i : conf.getCounters()) {
      auto name = i.getName();
      auto m = getCounters(name);
      m->update(i);
    }
  }
}

DataplaneMetricsJsonObject DataplaneMetricsBase::toJsonObject() {
  DataplaneMetricsJsonObject conf;

  for(auto &i : getCountersList()) {
    conf.addDataplaneMetricsCounters(i->toJsonObject());
  }

  return conf;
}
void DataplaneMetricsBase::addCountersList(const std::vector<DataplaneMetricsCountersJsonObject> &conf) {
  for (auto &i : conf) {
    std::string name_ = i.getName();
    addCounters(name_, i);
  }
}

void DataplaneMetricsBase::replaceCounters(const std::string &name, const DataplaneMetricsCountersJsonObject &conf) {
  delCounters(name);
  std::string name_ = conf.getName();
  addCounters(name_, conf);
}

void DataplaneMetricsBase::delCountersList() {
  auto elements = getCountersList();
  for (auto &i : elements) {
    std::string name_ = i->getName();
    delCounters(name_);
  }
}

std::shared_ptr<spdlog::logger> DataplaneMetricsBase::logger() {
  return parent_.logger();
}

