/**
* dynmonitor API generated from dynmonitor.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "DataplaneMetricsCountersBase.h"
#include "../Dynmonitor.h"


DataplaneMetricsCountersBase::DataplaneMetricsCountersBase(DataplaneMetrics &parent)
    : parent_(parent) {}

DataplaneMetricsCountersBase::~DataplaneMetricsCountersBase() {}

void DataplaneMetricsCountersBase::update(const DataplaneMetricsCountersJsonObject &conf) {

  if (conf.tableNameIsSet()) {
    setTableName(conf.getTableName());
  }
  if (conf.tableTypeIsSet()) {
    setTableType(conf.getTableType());
  }
  if (conf.minEntriesIsSet()) {
    setMinEntries(conf.getMinEntries());
  }
  if (conf.lablesIsSet()) {
    for (auto &i : conf.getLables()) {
      auto name = i.getName();
      auto m = getLables(name);
      m->update(i);
    }
  }
}

DataplaneMetricsCountersJsonObject DataplaneMetricsCountersBase::toJsonObject() {
  DataplaneMetricsCountersJsonObject conf;

  conf.setName(getName());
  conf.setTableName(getTableName());
  conf.setTableType(getTableType());
  conf.setMinEntries(getMinEntries());
  for(auto &i : getLablesList()) {
    conf.addDataplaneMetricsCountersLables(i->toJsonObject());
  }

  return conf;
}
void DataplaneMetricsCountersBase::addLablesList(const std::vector<DataplaneMetricsCountersLablesJsonObject> &conf) {
  for (auto &i : conf) {
    std::string name_ = i.getName();
    addLables(name_, i);
  }
}

void DataplaneMetricsCountersBase::replaceLables(const std::string &name, const DataplaneMetricsCountersLablesJsonObject &conf) {
  delLables(name);
  std::string name_ = conf.getName();
  addLables(name_, conf);
}

void DataplaneMetricsCountersBase::delLablesList() {
  auto elements = getLablesList();
  for (auto &i : elements) {
    std::string name_ = i->getName();
    delLables(name_);
  }
}

std::shared_ptr<spdlog::logger> DataplaneMetricsCountersBase::logger() {
  return parent_.logger();
}

