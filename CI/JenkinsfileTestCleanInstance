def image_modes = ["default", "pcn-k8s", "pcn-iptables"]

def generateStage(job) {
    return {
       stage("Build Docker Mode: ${job}") {
       script {
        docker.withRegistry("", 'polycube-repo') {
        sh """export DOCKER_BUILDKIT=1
        docker build . -t "polycubebot/${image_name}-${job}:${image_tag}" --build-arg DEFAULT_MODE=$job
        docker push polycubebot/${image_name}-${job}:${image_tag}
        """
        }
      }
       }
    }
}


def parallelStagesMap = image_modes.collectEntries{
   ["${it}" : generateStage(it)]
}

pipeline {
    agent {
        label 'docker'
    }
    options {
        disableConcurrentBuilds()
        lock resource: "polycube-clean-instance"
        timeout(time: 4, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '30'))
    }

    environment {
      image_tag = "${env.GIT_COMMIT}"
      image_name = "polycube"
      registryCred = credentials('polycube-repo')
    }

    stages {

    stage ('Build Base Image') {
     steps {
        script {
                 docker.withRegistry("", 'polycube-repo') {
                 sh """export DOCKER_BUILDKIT=1
                     docker build . -t "polycubebot/base_image:latest" -f Dockerfile_base_image
                     docker push polycubebot/base_image:latest
            """
            }
        }
      }
    }

    stage ('Docker Polycube Images') {
            steps {
                script {
                   parallel parallelStagesMap
                }
            }
        }

    stage('Launch Clean Instance Tests') {
    agent {
             label "docker"
       }
       steps {
           sh"""
           set +e
           sleep 60
           docker run -d --name polycubed --rm --privileged --network host -v /lib/modules:/lib/modules:ro -v /usr/src:/usr/src:ro -v /etc/localtime:/etc/localtime:ro polycubebot/${image_name}-default:${image_tag}
           #docker run -d --name polycubed --rm --privileged --network host -v /lib/modules:/lib/modules:ro -v /usr/src:/usr/src:ro -v /etc/localtime:/etc/localtime:ro polycubebot/polycube-default:6b21385c35db891c62a9894931d59acf142faec3
           mkdir bin
           docker cp polycubed:/usr/local/bin/polycubectl ./bin/
           export PATH=$PATH:${WORKSPACE}/bin
           export KILL_COMMAND="docker stop polycubed"
           export polycubed="docker run -d --name polycubed --rm --privileged --network host -v /lib/modules:/lib/modules:ro -v /usr/src:/usr/src:ro -v /etc/localtime:/etc/localtime:ro polycubebot/${image_name}-default:${image_tag}"
           #"docker run -d --name polycubed --rm --privileged --network host -v /lib/modules:/lib/modules:ro -v /usr/src:/usr/src:ro -v /etc/localtime:/etc/localtime:ro polycubebot/polycube-default:6b21385c35db891c62a9894931d59acf142faec3"
           cd tests/
           ./run-tests.sh
           """
       }
       post {
        failure {
           script {
           sh """
              echo "Failed"
           """
           }
        }
       }
      }
    stage('Launch Same Instance Tests') {
           agent {
                    label "docker"
              }
              steps {
                  sh"""
                  set +e
                  docker run -d --name polycubed --rm --privileged --network host -v /lib/modules:/lib/modules:ro -v /usr/src:/usr/src:ro -v /etc/localtime:/etc/localtime:ro             polycubebot/${image_name}-default:${image_tag}
                  mkdir bin
                  docker cp polycubed:/usr/local/bin/polycubectl ./bin/
                  export PATH=$PATH:${WORKSPACE}/bin
                  export KILL_COMMAND="docker stop polycubed"
                  export polycubed="docker run -d --name polycubed --rm --privileged --network host -v /lib/modules:/lib/modules:ro -v /usr/src:/usr/src:ro -v /etc/localtime:/etc/localtime:ro polycubebot/${image_name}-default:${image_tag}"
                  cd tests/ && ./run-tests.sh false
                  """
                   }
                   post {
                    failure {
           script {
           sh """
               echo "Failed"
           """
           }
        }
       }
      }
    stage('Launch Iptables Tests') {
           agent {
                    label "docker"
              }
              steps {
                  sh"""
                  set +e
                  docker run -d --name polycubed --rm --privileged --network host -v /lib/modules:/lib/modules:ro -v /usr/src:/usr/src:ro -v /etc/localtime:/etc/localtime:ro             polycubebot/${image_name}-pcn:${image_tag}
                  mkdir bin
                  docker cp polycubed:/usr/local/bin/polycubectl ./bin/
                  export PATH=$PATH:${WORKSPACE}/bin
                  export KILL_COMMAND="docker stop polycubed"
                  export polycubed="docker run -d --name polycubed --rm --privileged --network host -v /lib/modules:/lib/modules:ro -v /usr/src:/usr/src:ro -v /etc/localtime:/etc/localtime:ro             polycubebot/${image_name}-pcn-iptables:${image_tag}"
                  cd tests/
                  ./run-tests-iptables.sh
                  """
                   }
                   post {
                    failure {
           script {
           sh """
             docker stop polycubed
           """
           }
        }
       }
      }
    }
     post {
                always {
                    script {
//                        def props = readJSON file: 'tests/result.json'
//                        def testsSuccededParameter = new //StringParameterValue("NUM_TESTS_SUCCEDED", props.passed)
//                        def testsTotalParameter = new StringParameterValue//("TOT_TESTS", props.total)
//                        def testsStageParameter = new StringParameterValue//("TEST_STAGE_NAME", "TESTING_CLEAN_INSTANCE")
//                        currentBuild.getRawBuild().actions.add(new //ParametersAction(testsSuccededParameter))
//                        currentBuild.getRawBuild().actions.add(new //ParametersAction(testsTotalParameter))
//                        currentBuild.getRawBuild().actions.add(new //ParametersAction(testsStageParameter))
//
//                        int total = String.valueOf(props.total)
//                        int passed = String.valueOf(props.passed)
//                        int failed = total - passed
//
//                        if(failed > 0) {
//                            def attachments = getSlackAttachment//(currentBuild, new String("Testing Clean Instance"))
//
//                            def final_string = attachments.toString()
//                            echo "${final_string}"
//
//                            notifySlack(currentBuild.result,attachments)
//                        }
//
                        sh 'rm -rf ${WORKSPACE}/*'
                    }
                }
            }
}


